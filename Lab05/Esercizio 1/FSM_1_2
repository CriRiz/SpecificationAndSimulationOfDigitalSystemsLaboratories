library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity FSM_1_2 is
    Port (P: IN std_logic;
           Clk, Rst: IN std_logic;
           R: OUT std_logic);
end FSM_1_2;

architecture Behavioral of FSM_1_2 is
    type StateType is (A, B, C, D);
    signal CurrentState: StateType;
begin
RegAndComb: process(Clk, Rst)
begin
    if Rst = '1' then 
        CurrentState <= A; 
        R <= '0';
    elsif rising_edge(Clk) then 
        case CurrentState is
            when A => R <= '0';
                if (P = '0') then 
                    CurrentState <= A;
                else 
                    CurrentState <= B;
                end if;
            when B => R <= '0';
                if (P = '0') then 
                    CurrentState <= B;
                else
                    CurrentState <= C;
                end if;    
            when C => R <= '0';
                if (P = '0') then 
                    CurrentState <= C;
                else 
                    CurrentState <= D;
                end if;
            when D => R <= '1';
                if (P = '0') then 
                    CurrentState <= A;                    
                else 
                    CurrentState <= B;
                end if;
        end case;
        end if;
end process RegAndComb;
end Behavioral;
